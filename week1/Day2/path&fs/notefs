File System:
1. in path, it will not determine the validation of the path. In fs, it offers an method
   fs.exists()
   This is asynchronized I/O.
   so it need be used as follow:
      fs.exists('/etc/passwd', function (exists) {
        util.debug(exists ? "it's there" : "no passwd!");
      });

   will be deprecated, since just use the fs.open and handle the error in there.

 2. Query the file stats:
   1) fs.stat(path, callback)
      callback = function(err, stats), and the stats is fs.Stats object.
      it has the following methods:
       1) stats.isFile(),
       2) stats.isDirectory()
       3) stats.isBlockDevice()
       4) stats.isCharacterDevice()
       5) stats.isFIFO()
       6) stats.isSocket()

 3. FILE:
   1) open file
       fs.open(path, flags[, mode], callback)
       callback (err, fd)
       the flag: r, r+, w, w+, a, a+

       fs.openSync(path, flags[, mode])

   2) read the file
       fs.read(fd, buffer, offset, length, position, callback)#
       Read data from the file specified by fd.

       buffer is the buffer that the data will be written to.

       offset is the offset in the buffer to start writing at.

       length is an integer specifying the number of bytes to read.

       position is an integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.

       The callback is given the three arguments, (err, bytesRead, buffer).

   3) fs.write(fd, data[, position[, encoding]], callback)#
      Write data to the file specified by fd. If data is not a Buffer instance then the value will be coerced to a string.

      position refers to the offset from the beginning of the file where this data should be written. If typeof position !== 'number' the data will be written at the current position. See pwrite(2).

      encoding is the expected string encoding.

      The callback will receive the arguments (err, written, string) where written specifies how many bytes the passed string required to be written. Note that bytes written is not the same as string characters. See Buffer.byteLength.

      Unlike when writing buffer, the entire string must be written. No substring may be specified. This is because the byte offset of the resulting data may not be the same as the string offset.

      Note that it is unsafe to use fs.write multiple times on the same file without waiting for the callback. For this scenario, fs.createWriteStream is strongly recommended.

      On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.

   4) fs.close(fd, callback)
      should close it and handle the error

   5) fs.readFile(filename[, options], callback)#
      filename String
      options Object
         encoding String | Null default = null
         flag String default = 'r'
      callback Function
      Asynchronously reads the entire contents of a file. Example:

      fs.readFile('/etc/passwd', function (err, data) {
        if (err) throw err;
        console.log(data);
      });