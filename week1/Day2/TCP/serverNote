TCP server:
1. net.createServer([options][, connectionListener])#
   Creates a new TCP server. The connectionListener argument is automatically set as a listener for the 'connection' event.

   Creates a new TCP server. The connectionListener argument is automatically set as a listener for the 'connection' event.

   options is an object with the following defaults:

   {
     allowHalfOpen: false,
     pauseOnConnect: false
   }
   If allowHalfOpen is true, then the socket won't automatically send a FIN packet when the other end of the socket sends a FIN packet. The socket becomes non-readable, but still writable. You should call the end() method explicitly. See 'end' event for more information.

   If pauseOnConnect is true, then the socket associated with each incoming connection will be paused, and no data will be read from its handle. This allows connections to be passed between processes without any data being read by the original process. To begin reading data from a paused socket, call resume().

2. it will return an net.Server class. So
    1) server.listen(port[, host][, backlog][, callback])
       Begin accepting connections on the specified port and host. If the host is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY). A port value of zero will assign a random port.

       Backlog is the maximum length of the queue of pending connections. The actual length will be determined by your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux. The default value of this parameter is 511 (not 512).

       This function is asynchronous. When the server has been bound, 'listening' event will be emitted. The last parameter callback will be added as an listener for the 'listening' event.

    2) server.close([callback])  // note here the close may mot emit the close event. note the difference
       Stops the server from accepting new connections and keeps existing connections. This function is asynchronous, the server is finally closed when all connections are ended and the server emits a 'close' event.

      3) server.address(), // { port: 12346, family: 'IPv4', address: '127.0.0.1' }

    4) server.getConnections(callback)#
       Asynchronously get the number of concurrent connections on the server. Works when sockets were sent to forks.

       Callback should take two arguments err and count.

       net.Server is an EventEmitter with the following events:

    5) Event: 'listening'
       Emitted when the server has been bound after calling server.listen

    6) Event: 'connection'#
       Socket object The connection object
       Emitted when a new connection is made. socket is an instance of net.Socket.

    7) Event: 'close'#
       Emitted when the server closes. Note that if connections exist, this event is not emitted until all connections are ended.

3. the net.Socket
      1) socket.setEncoding([encoding])#

      2) socket.write(data[, encoding][, callback])#
      Sends data on the socket. The second parameter specifies the encoding in the case of a string--it defaults to UTF8 encoding.

      Returns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. 'drain' will be emitted when the buffer is again free.

      The optional callback parameter will be executed when the data is finally written out - this may not be immediately.

      3) socket.end([data][, encoding])#
         Half-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.

      4) socket.setNoDelay([noDelay])#
         Disables the Nagle algorithm. By default TCP connections use the Nagle algorithm, they buffer data before sending it off. Setting true for noDelay will immediately fire off data each time socket.write() is called. noDelay defaults to true.

      5) socket.setKeepAlive([enable][, initialDelay])#
         Enable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket. enable defaults to false.

         Set initialDelay (in milliseconds) to set the delay between the last data packet received and the first keepalive probe. Setting 0 for initialDelay will leave the value unchanged from the default (or previous) setting. Defaults to 0.

      7) event: connect, data, end, timeout, error, drain, close
                end: Emitted when the other end of the socket sends a FIN packet.
                close: Emitted once the socket is fully closed.

TCP client:
1.   net.createConnection(options[, connectionListener])#
     A factory method, which returns a new 'net.Socket' and connects to the supplied address and port.

     When the socket is established, the 'connect' event will be emitted.

     Has the same events as 'net.Socket'.

     For TCP sockets, options argument should be an object which specifies:

     port: Port the client should connect to (Required).

     host: Host the client should connect to. Defaults to 'localhost'.

     localAddress: Local interface to bind to for network connections.

     localPort: Local port to bind to for network connections.

     family : Version of IP stack. Defaults to 4.

     For local domain sockets, options argument should be an object which specifies:

     path: Path the client should connect to (Required).
     Common options are:

     allowHalfOpen: if true, the socket won't automatically send a FIN packet when the other end of the socket sends a FIN packet. Defaults to false. See 'end' event for more information.
     The connectListener parameter will be added as an listener for the 'connect' event.

**Notice**:
1. net.Server has the close event, not the end event.
