HTTP server:
1. http.createServer([requestListener})
   return the http.Server object, and the callback is add to the 'request' event.
2. http.server
   server.listen(port[, hostname][, backlog][, callback])
   server.close([callback])

3. Class: http.ServerResponse
   1) response.writeHead(statusCode[, statusMessage][, headers])
   Example:

   var body = 'hello world';
   response.writeHead(200, {
     'Content-Length': body.length,
     'Content-Type': 'text/plain' });
   This method must only be called once on a message and it must be called before response.end() is called.

   If you call response.write() or response.end() before calling this, the implicit/mutable headers will be calculated and call this function for you.

   Note that Content-Length is given in bytes not characters. The above example works because the string 'hello world' contains only single byte characters. If the body contains higher coded characters then Buffer.byteLength() should be used to determine the number of bytes in a given encoding. And Node does not check whether Content-Length and the length of the body which has been transmitted are equal or not.

   2) response.statusCode
   3) response.statusMessage
   4) response.setHeader(name, value), res.headers
    Example:

    response.setHeader("Content-Type", "text/html");
    or

    response.setHeader("Set-Cookie", ["type=ninja", "language=javascript"]);

   5) response.headersSent
   6) response.getHeader(name)#
      Reads out a header that's already been queued but not sent to the client. Note that the name is case insensitive. This can only be called before headers get implicitly flushed.

      Example:

      var contentType = response.getHeader('content-type');
   7) response.removeHeader(name)#
      Removes a header that's queued for implicit sending.

      Example:

      response.removeHeader("Content-Encoding");

   8) response.write(chunk[, encoding][, callback])#
      If this method is called and response.writeHead() has not been called, it will switch to implicit header mode and flush the implicit headers.

      This sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.

      chunk can be a string or a buffer. If chunk is a string, the second parameter specifies how to encode it into a byte stream. By default the encoding is 'utf8'. The last parameter callback will be called when this chunk of data is flushed.

      Note: This is the raw HTTP body and has nothing to do with higher-level multi-part body encodings that may be used.

      The first time response.write() is called, it will send the buffered header information and the first body to the client. The second time response.write() is called, Node assumes you're going to be streaming data, and sends that separately. That is, the response is buffered up to the first chunk of body.

      Returns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. 'drain' will be emitted when the buffer is free again.

   9) response.end([data][, encoding][, callback])#
      This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, response.end(), MUST be called on each response.

      If data is specified, it is equivalent to calling response.write(data, encoding) followed by response.end(callback).

      If callback is specified, it will be called when the response stream is finished.

   10) http.request(options[, callback])
   11) http.get(options[, callback])#  The only difference between this method and http.request() is that it sets the method to GET and calls req.end() automatically.

   12) Class: http.ClientRequest
   13) http.IncomingMessage
   14) message.httpVersion
   15) message.headers
   16) message.method
       message.url
