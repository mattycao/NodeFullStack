WEEK2: CRUD
1. crud and the mongo shell
   CRUD: create -> insert, read -> find, update ->update delete -> remove

   MOngoDB's crud operations exist as methods/functions in programming language APIs,
   not as a separate language.

2. Secret of the mongo shell:
    >for(i = 0; i < 3; i++) print(somthing)

    >help

3. BSON:
   how mongodb represent data.

   document oriented.

   use the binary representation of the data to store
   NUmberInt(1)
   NumberLong(1)
   new Date()
   BSON has a lot more data type that javascript can support, like floating point number, timestamps or something else.

4. Insert Doc:
   document, in javascript it is represented as a object.
   The database has a lot of collections, the collection is like a table in the RDBMS.
   The collection is a set of documents.
   >db
   >db.people.insert(doc)
   >db.people.find() // all of the doc inside
     _id: when insert, the server require the doc to have an unique identified field.
          it is a primary key. And it is imuttable.
          require the mongodb id to be unique in the collection.
          If you doesn't fill the _id, the server will generate one and insert it into your document.

5. findOne
   db.people.findOne()
   db.people.findOne({name:'John'})
   db.people.findOne({name:'John'}, {'name': true, '_id':false}) // second one is used for show
   // the _id will show in default

6. find
   db.people.find()
   the server will use the cursor to show, and the cursor by default, it will close in 10 mins.
   using the field selection  by examples
   db.people.find({student:19})
   db.people.find({student:19}, {'name':true, '_id':false})

7. Querying Using $gt and $lt
   >db.scores.find({score : {$gt : 95}})
   the operator is parsed as an json.
   >db.scores.find({score : {$gt : 95}, type:'essay'})
   $gt, $gte, $lt, $lte

8. inequalities on strings
   db.people.find({name:{$lt:'D'}})
   db.users.find( { name : { $gte : "F" , $lte : "Q" } } );
   utf-8 unit
   since it is schemeless, it means that in the same field the data may has different type, mongodb
   support it but actually not recommanded, so it the different type, the comparison will not be spaned,
   like if you make it compare a string, only the string value field document will be compared.

9. using the regexes, $exists, $type
   mongodb can query the document by the structure and type, and of course, the value.
   field exists:
   >db.people.find({pro : {$exists: true}});
   field type:
   >db.people.find({name: {$type:2}})  // 2 -> string
   reg exp:
   >db.people.find({name : {$regex : 'a'}})
   >db.people.find({name : { $regex : 'a$'}})

10. using $or
   >db.people.find( { $or : [{name : {$regex: 'e$'}}, {age:{$exists: true}}]});
   notice: $or is a prefix operator, not like the ones we have seen before.
   Notice: if you close the bracket wrong, the mongo client will print ... to indicate the
           your query is wrong, press return again, it will abandon it.

11. using $and
   >db.people.find({ $and : [{name : {$regex: 'e$'}}, {age:{$exists: true}}]});
   example:
    db.scores.find( { score : { $gt : 50 }, score : { $lt : 60 } } );
     here, when mongodb parse the find, it find two object, which means, it will find all documents
     with score less 60.

12. Query inside Arrays
    the mongodb will automatically find the content inside the array, however, it will not recuirsively find
    inside into a deep level.

13. Using $in, and $all
    >db.accounts.find({favoriates: {$all : [ 'a', 'b']}})   has a and b,
    >db.accounts.find({favoriates: {$in : [ 'a', 'b']}})  has a or b,

14. Queries with dot notation
    >
